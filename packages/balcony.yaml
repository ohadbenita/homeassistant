---
input_number:
  balcony_fan_percentage:
    name: Balcony fan percentage
    min: 0
    max: 100
    step: 5
    unit_of_measurement: '%'


script:
  turn_balcony_fan_on:
    alias: 'Turn balcony fan on'
    sequence:
      - choose:
          - conditions:
              - condition: state
                entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0
                state: 'off'
            sequence:
              - action: homeassistant.turn_on
                entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0
              - delay: '00:00:05'
        default:
          - action: homeassistant.turn_on
            entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0

      - choose:
          - conditions:
              - condition: sun
                before: sunset
            sequence:
              - action: light.turn_off
                target:
                  entity_id: light.balcony_fan_light
        default: []

      - action: remote.send_command
        target:
          entity_id: remote.living_room_broadlink
        data:
          device: balcony_fan
          command: fan_speed_2

  turn_balcony_fan_off:
    alias: "Turn balcony fan off"
    sequence:
      - action: remote.send_command
        target:
          entity_id: remote.living_room_broadlink
        data:
          device: balcony_fan
          command: fan_off

  balcony_fan_set_speed:
    alias: "Set balcony fan speed"
    sequence:
      - action: input_number.set_value
        target:
          entity_id: input_number.balcony_fan_percentage
        data:
          value: "{{ percentage }}"

      - choose:
          - conditions:
              - condition: template
                value_template: "{{ percentage | int == 0 }}"
            sequence:
              - action: remote.send_command
                target:
                  entity_id: remote.living_room_broadlink
                data:
                  device: balcony_fan
                  command: fan_off

          - conditions:
              - condition: template
                value_template: "{{ percentage | int < 16 and percentage | int > 0 }}"
            sequence:
              - action: remote.send_command
                target:
                  entity_id: remote.living_room_broadlink
                data:
                  device: balcony_fan
                  command: fan_speed_1

          - conditions:
              - condition: template
                value_template: "{{ percentage | int >= 16 and percentage | int < 33 }}"
            sequence:
              - action: remote.send_command
                target:
                  entity_id: remote.living_room_broadlink
                data:
                  device: balcony_fan
                  command: fan_speed_2

          - conditions:
              - condition: template
                value_template: "{{ percentage | int >= 33 and percentage | int < 50 }}"
            sequence:
              - action: remote.send_command
                target:
                  entity_id: remote.living_room_broadlink
                data:
                  device: balcony_fan
                  command: fan_speed_3

          - conditions:
              - condition: template
                value_template: "{{ percentage | int >= 50 and percentage | int < 66 }}"
            sequence:
              - action: remote.send_command
                target:
                  entity_id: remote.living_room_broadlink
                data:
                  device: balcony_fan
                  command: fan_speed_4

          - conditions:
              - condition: template
                value_template: "{{ percentage | int >= 66 and percentage | int < 83 }}"
            sequence:
              - action: remote.send_command
                target:
                  entity_id: remote.living_room_broadlink
                data:
                  device: balcony_fan
                  command: fan_speed_5

          - conditions:
              - condition: template
                value_template: "{{ percentage | int >= 83 }}"
            sequence:
              - action: remote.send_command
                target:
                  entity_id: remote.living_room_broadlink
                data:
                  device: balcony_fan
                  command: fan_speed_6

  turn_balcony_fan_light_on:
    alias: 'Turn balcony fan light on'
    sequence:
      - choose:
          - conditions:
              - condition: state
                entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0
                state: 'off'
            sequence:
              - action: homeassistant.turn_on
                entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0
        default:
          - action: remote.send_command
            target:
              entity_id: remote.living_room_broadlink
            data:
              device: balcony_fan
              command: light_toggle

  turn_parking_flood_light_on:
    alias: 'Turn parking flood light on'
    sequence:
      - action: switch.turn_on
        entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0

      - wait_template: "{{ is_state('switch.parking_flood_light_switch_0', 'off') }}"
        timeout: '00:01:00'
        continue_on_timeout: false

      - action: switch.turn_on
        entity_id: switch.parking_flood_light_switch_0

fan:
  - platform: template
    fans:
      balcony:
        friendly_name: "Balcony fan"
        value_template: >-
          {%- set power_difference = (states('sensor.parking_flood_light_switch_0_power') | float(default=0) - states('sensor.shelly1pmminig3_34b7dac88574_switch_0_power') | float) | abs -%}
          {{ power_difference > 7 and (power_difference < 23 or power_difference > 27) }}
        speed_count: 6
        turn_on:
          action: script.turn_balcony_fan_on
        turn_off:
          action: script.turn_balcony_fan_off
        set_percentage:
          action: script.balcony_fan_set_speed
          data:
            percentage: "{{ percentage }}"
        percentage_template: "{{ states('input_number.balcony_fan_percentage') }}"

light:
  - platform: template
    lights:
      balcony_fan_light:
        friendly_name: "Balcony Fan Light"
        turn_on:
          action: script.turn_balcony_fan_light_on
        turn_off:
          action: remote.send_command
          target:
            entity_id: remote.living_room_broadlink
          data:
            device: balcony_fan
            command: light_toggle
        value_template: >-
          {{ states('sensor.shelly1pmminig3_34b7dac88574_switch_0_power') | float > 20 }}

      parking_flood_light:
        friendly_name: "Parking flood light"
        turn_on:
          action: script.turn_parking_flood_light_on
        turn_off:
          action: switch.turn_off
          target:
            entity_id: >
              {% if is_state('switch.shelly1pmminig3_34b7dac88574_switch_0', 'on') %}
                switch.parking_flood_light_switch_0
              {% else %}
                switch.shelly1pmminig3_34b7dac88574_switch_0
              {% endif %}
        value_template: >-
          {{
            is_state('switch.shelly1pmminig3_34b7dac88574_switch_0', 'on') and
            is_state('switch.parking_flood_light_switch_0', 'on')
          }}

automation:
  - alias: 'Balcony - Handle button actions'
    id: balcony_pergola_button_actions
    initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.pergola_01_action

    condition:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'off'

    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.pergola_01_action
                state: 'button_1_single'
            sequence:
              - action: fan.toggle
                target:
                  entity_id: fan.balcony

          - conditions:
              - condition: state
                entity_id: sensor.pergola_01_action
                state: 'button_1_double'
            sequence:
              - action: light.toggle
                target:
                  entity_id: light.parking_flood_light

          - conditions:
              - condition: state
                entity_id: sensor.pergola_01_action
                state: 'button_2_single'
            sequence:
              - action: light.toggle
                target:
                  entity_id: light.balcony_fan_light


  - alias: "Turn on parking flood lights when motion is detected"
    id: yard_turn_on_parking_flood_light_when_motion_detected
    initial_state: false
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.parking_stairs_01_occupancy
        to: 'on'

    condition:
      condition: and
      conditions:
        - condition: or
          conditions:
            - condition: sun
              before: sunrise
              before_offset: "00:15:00"
            - condition: sun
              after: sunset
              after_offset: "-00:15:00"

    action:
      - action: homeassistant.turn_on
        entity_id: light.parking_flood_light

  - alias: "Turn off parking flood lights when no motion is detected"
    id: yard_turn_off_parking_flood_light_when_no_motion_detected
    initial_state: false
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.parking_stairs_01_occupancy
        to: 'off'

    # Should be re-added when the parking flood light shelly is replaced
    # condition:
    #   condition: state
    #   entity_id: light.parking_flood_light
    #   state: 'on'

    action:
      - action: homeassistant.turn_off
        entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0
      #   entity_id: light.parking_flood_light
      # - action:

  - alias: "Turn on pergola fan light when motion is detected"
    id: balcony_turn_on_pergola_fan_light_when_motion_detected
    initial_state: false
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.occupancy_sensor_1104_occupancy
        to: 'on'

    condition:
      condition: and
      conditions:
        - condition: or
          conditions:
            - condition: sun
              before: sunrise
              before_offset: "00:15:00"
            - condition: sun
              after: sunset
              after_offset: "-00:15:00"

    action:
      - action: homeassistant.turn_on
        entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0

  # - alias: "Turn off pergola fan light when no motion is detected"
  #   id: balcony_turn_off_pergola_fan_light_when_no_motion_detected
  #   initial_state: true
  #   mode: single
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.parking_stairs_01_occupancy
  #       to: 'off'

  #   condition:
  #     - condition: state
  #       entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0
  #       state: 'on'
  #     - condition: state
  #       entity_id: automation.turn_off_parking_flood_lights_when_no_motion_is_detected
  #       state: 'on'

  #   action:
  #     - action: homeassistant.turn_off
  #       entity_id: switch.shelly1pmminig3_34b7dac88574_switch_0
