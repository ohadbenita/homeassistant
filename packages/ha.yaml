---
input_text:
  hass_last_notified_available_version:
    name: hass_last_notified_available_version
  hass_last_notified_upgraded_version:
    name: hass_last_notified_upgraded_version

  cover_dining_room_left_position:
    name: Dining Room Left Window Position
  cover_dining_room_right_position:
    name: Dining Room Right Window Position
  cover_dining_room_main_position:
    name: Dining Room Main Window Position
  cover_living_room_left_position:
    name: Living Room Left Window Position
  cover_living_room_right_position:
    name: Living Room Right Window Position
  cover_living_room_middle_position:
    name: Living Room Middle Window Position


input_number:
  battery_low_level_threshold:
    name: Battery Low Level Threshold
    min: 20
    max: 80
    step: 5


input_boolean:
  skip_firmware_updates:
    name: Skip firmware checks by end of week
    icon: mdi:update


binary_sensor:
  - platform: rest
    name: Whatsapp API Availability
    unique_id: whatsapp_api_availability
    resource: !secret green_api_availability_url
    method: POST
    value_template: "{{ value_json.existsWhatsapp | default(false) }}"
    device_class: connectivity


template:
  - binary_sensor:
      - name: "DST"
        unique_id: "is_dst_active"
        state: >
          {{now().timetuple().tm_isdst == 1}}
        device_class: running

      - name: "Ohad iPhone Location Permission"
        state: >
          {{ states('sensor.ohadbenita_location_permission') != 'Authorized Always' }}
        device_class: problem

      - name: "Rinat iPhone Location Permission"
        state: >
          {{ states('sensor.rinats_iphone_location_permission') != 'Authorized Always' }}
        device_class: problem

      - name: "Ella iPhone Location Permission"
        state: >
          {{ states('sensor.ellas_iphone_location_permission') != 'Authorized Always' }}
        device_class: problem

      - name: "Roi iPhone Location Permission"
        state: >
          {{ states('sensor.rois_iphone_location_permission') != 'Authorized Always' }}
        device_class: problem

      - name: "Adi iPhone Location Permission"
        state: >
          {{ states('sensor.iphone_location_permission') != 'Authorized Always' }}
        device_class: problem


  - sensor:
    - name: Day of the week
      unique_id: day_of_week
      state: >
        {{ ["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"][now().weekday()][:3] | lower}}

    - name: ha_base_url
      unique_id: ha_base_url
      state: !secret base_url

rest_command:
  shelly_calibrate_cover:
    url: "http://{{ shelly_ip }}/rpc"
    method: POST
    headers:
      content-type: "application/json"
    payload: '{"id":1,"method":"Cover.Calibrate","params":{"id":0}}'

  shelly_reboot_device:
    url: "http://{{ shelly_ip }}/rpc"
    method: POST
    headers:
      content-type: "application/json"
    payload: '{"id":1,"method":"Shelly.Reboot"}'

sensor:
  - platform: rest
    name: Home Assistant Released Version
    scan_interval: 300
    json_attributes:
      - body
      - html_url
    resource: https://api.github.com/repos/home-assistant/home-assistant/releases/latest
    username: !secret github_username
    password: !secret github_access_token
    authentication: basic
    value_template: '{{ value_json.tag_name }}'
    headers:
      Accept: application/vnd.github.v3+json
      Content-Type: application/json
      User-Agent: Home Assistant REST sensor


automation:
  - alias: Notify HASS is online
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
    action:
      - action: notify.mobile_app_ohadbenita
        data:
          title: "HA Service"
          message: "ğŸ¤– HomeAssistant is online - {{ states('sensor.current_local_version') }}"


  - alias: Home Assistant Release Check
    initial_state: true
    trigger:
      - platform: state
        entity_id: binary_sensor.hass_docker_version_dockerhub_update_available
        to: 'on'

      - platform: homeassistant
        event: start

    condition:
      condition: and
      conditions:
        - condition: template
          value_template: >-
            {% if is_state('input_text.hass_last_notified_available_version', states('sensor.hass_docker_version')) %}
                False
            {% else %}
                True
            {% endif %}

    action:
      - action: notify.ohad_telegram
        data_template:
          message: >-
            A new version of Home Assistant is available, {{ states('sensor.hass_docker_version') }}, while existing local version is {{states('sensor.current_local_version') }}

            Link: {{ state_attr('sensor.home_assistant_released_version', 'html_url') }}

      - action: input_text.set_value
        data_template:
          entity_id: input_text.hass_last_notified_available_version
          value: "{{ states('sensor.hass_docker_version') }}"


  - alias: Notify if upgrade occurred
    id: ha_notify_on_upgrade
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start

    condition:
      condition: and
      conditions:
        - condition: template
          value_template: >-
            {% if is_state('input_text.hass_last_notified_upgraded_version', states('sensor.current_local_version')) %}
                False
            {% else %}
                True
            {% endif %}

    action:
      - action: notify.ohad_telegram
        data_template:
          message: >-
            HASS has been upgraded from {{states('input_text.hass_last_notified_upgraded_version')}} to {{states('sensor.current_local_version')}}, you can find the release notes @ https://github.com/home-assistant/home-assistant/releases/{{states('sensor.current_local_version')}}

      - action: input_text.set_value
        data_template:
          entity_id: input_text.hass_last_notified_upgraded_version
          value: "{{ states('sensor.current_local_version') }}"


  - alias: Notify when Zigbee sensors go offline
    id: ha_zigbee_sensor_offline_notification
    initial_state: true
    mode: queued
    max: 5
    trigger:
      - platform: mqtt
        topic: z2m-mainfloor/+/availability
        payload: offline

    action:
      - action: notify.ohad_telegram
        data:
          message: |
            {{ trigger.topic.split('/')[1] }} is {{ trigger.payload }}


  - alias: Notify when core network devices are offline
    id: ha_core_devices_availability_check
    mode: single
    initial_state: true
    trigger:
      - platform: template
        value_template: >
          {% set core_devices = [
            'lock.entrance_door',
            'lock.kitchen_door',
            'lock.kids_bathroom_door',
            'switch.irrigation_l1',
            'climate.living_room_ac',
            'climate.master_bedroom_ac',
            'climate.ella_ac',
            'cover.shellyplus2pm_c4d8d5579560_cover_0',
            'cover.shelly2pmg3_8cbfea9a4548_cover_0',
            'cover.living_room_right_window',
            'cover.shelly2pmg3_34cdb0776380_cover_0',
            'cover.dining_room_left_window',
            'cover.dining_room_main_window',
            'switch.shellyplus2pm_fcb4670e68e8_switch_0',
            'switch.shellyplus2pm_fcb4670e68e8_switch_1',
            'switch.shelly1pmminig3_34b7da92245c_switch_0',
            'switch.shelly1pmminig3_3030f9eca0dc_switch_0'
          ] %}
          {% from 'availability_template.jinja' import avail %}
          {{- not (avail(core_devices) | bool) -}}
    action:
      - action: notify.ohad_telegram
        data:
          message: >
            The following devices are offline:
            {%- for entity_id in [
              'lock.entrance_door',
              'lock.kitchen_door',
              'lock.kids_bathroom_door',
              'switch.irrigation_l1',
              'climate.living_room_ac',
              'climate.master_bedroom_ac',
              'climate.ella_ac',
              'cover.shellyplus2pm_c4d8d5579560_cover_0',
              'cover.shelly2pmg3_8cbfea9a4548_cover_0',
              'cover.living_room_right_window',
              'cover.shelly2pmg3_34cdb0776380_cover_0',
              'cover.dining_room_left_window',
              'cover.dining_room_main_window',
              'switch.shellyplus2pm_fcb4670e68e8_switch_0',
              'switch.shellyplus2pm_fcb4670e68e8_switch_1',
              'switch.shelly1pmminig3_3030f9eca0dc_switch_0',
              'switch.shelly1pmminig3_34b7da92245c_switch_0'
            ] -%}
              {% if states(entity_id) == 'unknown' or is_state(entity_id, 'unavailable') %}
                - {{ state_attr(entity_id, 'friendly_name') | replace("_", "\\_") }} - {{ entity_id | replace("_", "\\_") }}
              {%- endif -%}
              {%- endfor -%}

  - alias: "Weekly Battery Level Check"
    id: ha_weekly_battery_level_check
    initial_state: true
    trigger:
      platform: time
      at: "09:00:00"
    condition:
      condition: time
      weekday:
        - sun
    action:
      - variables:
          threshold: "{{ states('input_number.battery_low_level_threshold') | int }}"
          exclude:
            entity_id:
              - sensor.ellas_iphone_battery_level
              - sensor.ohadbenita_battery_level
              - sensor.rinats_iphone_battery_level
              - sensor.rois_iphone_battery_level
              - sensor.iphone_battery_level
              - sensor.ohadbenita_watch_battery
              - sensor.roi_room_entrance_battery
              - sensor.clinic_door_entrance_battery
              - sensor.living_room_01_battery
              - sensor.study_room_3d_printer_stand_battery
              - sensor.kitchen_counter_01_battery
              - sensor.ketem_tracker_battery
              - binary_sensor.entrance_door_battery_charging
          low_battery_devices: >
            {% set threshold = states('input_number.battery_low_level_threshold') | int %}
            {% set exclude = exclude %}
            {% set result = namespace(sensors=[]) %}
            {% for state in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
              {% if 0 <= state.state | int(-1) < threshold and not state.entity_id in exclude.entity_id %}
                {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ '%)'] %}
              {% endif %}
            {% endfor %}
            {% for state in states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') | selectattr('state', '==', 'on') %}
              {% if not state.entity_id in exclude.entity_id %}
                {% set result.sensors = result.sensors + [state.name] %}
              {% endif %}
            {% endfor %}
            {{ result.sensors | join('\n') }}
      - choose:
        - conditions:  # yamllint disable-line rule:indentation
            - condition: template
              value_template: "{{ low_battery_devices | length > 0 }}"
          sequence:
            - action: notify.ohad_telegram
              data:
                title: "Low Battery Alert"
                message: >
                  The following devices have low battery levels (below {{ threshold }}%):
                  {{ low_battery_devices }}
        default:
          - action: notify.ohad_telegram
            data:
              title: "Battery Check"
              message: "All devices have sufficient battery levels."


  - alias: "Notify on low battery levels - sensor-based"
    id: ha_battery_level_notification_sensor_based
    initial_state: true
    mode: queued
    max: 5
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.entrance_door_battery_low
          - binary_sensor.kids_bathroom_door_battery_low
          - binary_sensor.kitchen_door_battery_low
          - binary_sensor.kitchen_sink_battery_low
          - binary_sensor.kitchen_ceiling_battery_low
        to: 'on'
    action:
      - action: persistent_notification.create
        data:
          title: "Low Battery Alert"
          message: >
            The {{ trigger.to_state.attributes.friendly_name }} has a low battery.


  - alias: "Check for Pending Device Firmware Updates"
    id: ha_check_for_pending_firmware_updates
    description: "Send a Telegram message if there are pending updates for devices"
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
      - platform: template
        value_template: >
          {{ states.update | selectattr('attributes.device_class', 'eq', 'firmware') | selectattr('state', 'eq', 'on') | list | count > 0 }}
      - platform: state
        entity_id: input_boolean.skip_firmware_updates
        to: 'off'

    condition:
      - condition: template
        value_template: >
          {{ states.update | selectattr('attributes.device_class', 'eq', 'firmware') | selectattr('state', 'eq', 'on') | list | count > 0 }}
      - condition: state
        entity_id: input_boolean.skip_firmware_updates
        state: 'off'

    action:
      - action: notify.ohad_telegram
        data:
          message: >
            {% set updates = states.update | selectattr('attributes.device_class', 'eq', 'firmware') | selectattr('state', 'eq', 'on') | list %}
            {% if updates | count > 0 %}
            There are pending firmware updates for the following devices:
            {%- for update in updates %}
              {% set release_url = update.attributes.release_url %}
              - Entity: {{ update.entity_id | replace('_', '\_') }} - Installed: {{ update.attributes.installed_version }} | Available: [{{ update.attributes.latest_version }}]({{ release_url }})
            {%- endfor %}
            Do you want to update now?
            {% else %}
            There are no pending firmware updates at this time.
            {% endif %}
          data:
            parse_mode: markdown
            inline_keyboard:
              - "Update Now:/trigger_firmware_update, Snooze Updates (EOW):/snooze_firmware_updates"


  - alias: "Trigger Firmware Update via Telegram"
    id: ha_check_trigger_firmware_updates
    description: "Trigger firmware update when the user responds via Telegram."
    initial_state: true
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/trigger_firmware_update"

    action:
      - action: update.install
        data_template:
          entity_id: >
            {{ states.update | selectattr('attributes.device_class', 'eq', 'firmware') | selectattr('state', 'eq', 'on') | map(attribute='entity_id') | list }}

      - action: notify.ohad_telegram
        data:
          message: "Triggered installation of pending firmware updates"


  - alias: "Update check firmware skipped helper"
    id: ha_update_firmware_update_skipped_helper
    description: "Turn firmware check skipped when the user responds via Telegram."
    initial_state: true
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: "/snooze_firmware_updates"

    action:
      - action: input_boolean.turn_on
        entity_id: input_boolean.skip_firmware_updates

      - action: notify.ohad_telegram
        data:
          message: "Update check will be snoozed by end of week"


  - alias: Reset Firmware Check helper
    id: ha_reset_firmware_check_helper
    initial_state: true
    trigger:
      platform: time
      at: '02:00:00'
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - "sun"
    action:
      - action: input_boolean.turn_off
        entity_id: input_boolean.skip_firmware_updates


  - alias: Alert on Synology disk issues
    id: ha_synology_alert_on_disk_issues
    initial_state: true
    trigger:
      - platform: state
        entity_id:
          - sensor.benita_nas_drive_1_status
          - sensor.benita_nas_drive_2_status
          - sensor.benita_nas_drive_3_status
          - sensor.benita_nas_drive_4_status
        from: 'normal'

    action:
      - action: notify.ohad_telegram
        data_template:
          message: One of the Synology disks is malfunctioning, please check it as soon as possible.


  - alias: Notify when Synology security status is unsafe
    id: ha_synology_security_status_check
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.benita_nas_security_status
      to: 'on'

    action:
      - action: notify.ohad_telegram
        data:
          title: "Synology security status - unsafe"
          message: "Synology's security status changed to unsafe, please check security advisor for recent findings and recommendations"


  - alias: "Alert on Grisha's bin being full"
    id: ha_alert_grisha_bin_full
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.grisha_bin_full
      to: 'on'

    action:
      - action: notify.ohad_telegram
        data:
          message: "[Device maintenance] Grisha's bin is full."


  - alias: DST Warning
    initial_state: true
    trigger:
      - platform: time
        at: '10:00:00'
      - platform: time
        at: '19:00:00'
    condition:
      - condition: template
        value_template: >
          {{ state_attr('sensor.dst', 'next').days_to_event in [7,1] }}
    action:
      - action: notify.ohad_telegram
        data:
          message: >
            {%- set next = state_attr('sensor.dst', 'next') %}
            {%- set plural = 's' if next.days_to_event > 1 else '' %}
            "Daylight savings in {{ next.days_to_event }} day{{plural}}, you will {{ next.phrase }}!"


  - alias: Reboot Shelly devices
    id: ha_reboot_shelly_devices
    initial_state: true
    mode: single
    trigger:
      - platform: time
        at: "12:00:00"
    action:
      - variables:
          shelly_ips:
            - "172.16.1.63"   # Master bedroom fan light
            - "172.16.1.243"  # Master bedroom wall lights
            - "172.16.1.180"  # Hallway bookshelf light
      - repeat:
          for_each: "{{ shelly_ips }}"
          sequence:
            - action: rest_command.shelly_reboot_device
              data:
                shelly_ip: "{{ repeat.item }}"

  - alias: Notify Whatsapp API is down
    id: ha_notify_whatsapp_api_is_down
    description: Notify via Telegram when the API is down
    trigger:
      - platform: state
        entity_id: binary_sensor.whatsapp_api_availability
        to: "off"
    action:
      - action: notify.ohad_telegram
        data:
          title: "API Monitoring Alert"
          message: >
            ğŸš¨ The API at `http://172.16.0.9:3000/client/getContacts/ha` is down!
            Check https://github.com/t0mer/wapi-custom-notifier for instructions to re-setup


  - alias: Dismiss OCPP integration notifications
    id: ha_dismiss_ocpp_integration_notifications
    mode: parallel
    max: 10
    trigger:
      - platform: persistent_notification
        update_type:
          - added
        notification_id: ""

    condition:
      - condition: template
        value_template: "{{ trigger.notification.title | lower == \"ocpp integration\" }}"

    action:
      - delay:
          hours: 0
          minutes: 10
          seconds: 0
          milliseconds: 0
      - service: persistent_notification.dismiss
        data:
          notification_id: "{{ trigger.notification.notification_id }}"


  - id: ha_notify_iphone_storage_low
    alias: "Notify iPhone Storage Low"
    mode: single

    trigger:
      - platform: numeric_state
        entity_id:
          - sensor.rois_iphone_storage
          - sensor.rinats_iphone_storage
          - sensor.ellas_iphone_storage
          - sensor.iphone_storage
          - sensor.ohadbenita_storage
        below: 5

    action:
      - action: >
          notify.mobile_app_{{
            trigger.entity_id.split('.')[1].replace('_storage','')
          }}
        data:
          message: >
            {{ state_attr(trigger.entity_id, 'friendly_name') }} Storage Report:
            â€¢ Available: {{ state_attr(trigger.entity_id, 'Available') }}
            â€¢ Available (Important): {{ state_attr(trigger.entity_id, 'Available (Important)') }}
            â€¢ Available (Opportunistic): {{ state_attr(trigger.entity_id, 'Available (Opportunistic)') }}
            â€¢ Total: {{ state_attr(trigger.entity_id, 'Total') }}


  - id: ha_notify_iphone_location_permission_problem
    alias: "Notify when any iPhone location permission is in problem state"
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.ohad_iphone_location_permission
          - binary_sensor.rinat_iphone_location_permission
          - binary_sensor.ella_iphone_location_permission
          - binary_sensor.roi_iphone_location_permission
          - binary_sensor.adi_iphone_location_permission
        to: 'on'
    action:
      - action: notify.mobile_app_ohadbenita
        data:
          title: "Location Permission Problem"
          message: >
            {{ trigger.to_state.name }} is in a problem state (current: {{ trigger.to_state.state }})
